{"version":3,"sources":["home.js","serviceWorker.js","index.js"],"names":["Home","useState","input","setinput","getdata","num","a","body","esis","fetch","method","headers","JSON","stringify","response","json","jsonData","grade","document","getElementById","innerHTML","ename","edutype","home","className","style","marginLeft","marginTop","type","onChange","e","target","value","onClick","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+LA8DeA,EA7DF,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACVC,EADU,KACHC,EADG,KAEXC,EAAO,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,sEAENC,EAAO,CAAEC,KAAMH,GAFT,SAGWI,MAAM,mCAAoC,CAC/DC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BJ,KAAMK,KAAKC,UAAUN,KANX,cAGNO,EAHM,gBAQWA,EAASC,OARpB,OASW,WADjBC,EARM,QASCC,OACXC,SAASC,eAAe,SAASC,UAAYJ,EAASK,MACtDH,SAASC,eAAe,WAAWC,UAAY,6EAC/CF,SAASC,eAAe,QAAQC,UAAY,IAEnB,OAArBJ,EAASM,SACXJ,SAASC,eAAe,WAAWC,UACjC,6GACFF,SAASC,eAAe,SAASC,UAAYJ,EAASK,MACtDH,SAASC,eAAe,QAAQC,UAAYJ,EAASO,OAErDL,SAASC,eAAe,WAAWC,UACjC,oHACFF,SAASC,eAAe,SAASC,UAAYJ,EAASK,MACtDH,SAASC,eAAe,QAAQC,UAAYJ,EAASO,MAvB7C,kDA2BZL,SAASC,eAAe,SAASC,UAAY,qIAC7CF,SAASC,eAAe,WAAWC,UAAY,GAC/CF,SAASC,eAAe,QAAQC,UAAY,GA7BhC,0DAAH,sDAiCb,OACE,yBAAKI,UAAU,aACb,wBAAIA,UAAU,oBAAd,8EACA,wBAAIA,UAAU,oBAAd,iLACA,yBACEA,UAAU,+BACVC,MAAO,CAAEC,WAAY,MAAOC,UAAW,QAEvC,2BACEC,KAAK,OACLJ,UAAU,eACVK,SAAU,SAACC,GAAD,OAAO3B,EAAS2B,EAAEC,OAAOC,UAErC,4BAAQR,UAAU,kBAAkBS,QAAS,kBAAM7B,EAAQF,KAA3D,6BAIF,gCAAYsB,UAAU,+BACpB,wBAAIU,GAAG,UACP,wBAAIA,GAAG,SACP,wBAAIA,GAAG,eC5CKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASC,eAAe,SDyHpB,kBAAmBwB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.74f03b72.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nconst Home = () => {\r\n  const [input, setinput] = useState(\"\");\r\n  const getdata = async (num) => {\r\n    try {\r\n      const body = { esis: num };\r\n      const response = await fetch(\"http://mutanabi.herokuapp.com/st\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n      const jsonData = await response.json();\r\n      if (jsonData.grade === \"still\") {\r\n        document.getElementById(\"ename\").innerHTML = jsonData.ename;\r\n        document.getElementById(\"edutype\").innerHTML = \"الطالب دور ثان\";\r\n        document.getElementById(\"home\").innerHTML = \"\";\r\n      } else {\r\n        if (jsonData.edutype === \"DL\") {\r\n          document.getElementById(\"edutype\").innerHTML =\r\n            \"تعلم عن بعد من المنزل\";\r\n          document.getElementById(\"ename\").innerHTML = jsonData.ename;\r\n          document.getElementById(\"home\").innerHTML = jsonData.home;\r\n        } else {\r\n          document.getElementById(\"edutype\").innerHTML =\r\n            \"تعلم واقعي - من المدرسة\";\r\n          document.getElementById(\"ename\").innerHTML = jsonData.ename;\r\n          document.getElementById(\"home\").innerHTML = jsonData.home;\r\n        }\r\n      }\r\n    } catch (err) {\r\n      document.getElementById(\"ename\").innerHTML = \"يرجي التأكد من رقم الطالب\";\r\n      document.getElementById(\"edutype\").innerHTML = \"\";\r\n      document.getElementById(\"home\").innerHTML = \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"text-center mt-5\">مدرسة المتنبي </h1>\r\n      <h3 className=\"text-center mt-5\">ادخل رقم الطالب لمعرفة نوع التعلم</h3>\r\n      <div\r\n        className=\"group-form d-inline-flex p-2\"\r\n        style={{ marginLeft: \"35%\", marginTop: \"10%\" }}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          onChange={(e) => setinput(e.target.value)}\r\n        />\r\n        <button className=\"btn btn-primary\" onClick={() => getdata(input)}>\r\n          ابحث\r\n        </button>\r\n      </div>\r\n      <blockquote className=\"blockquote text-center mt-5\">\r\n        <h5 id=\"ename\"></h5>\r\n        <h5 id=\"home\"></h5>\r\n        <h5 id=\"edutype\"></h5>\r\n      </blockquote>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}